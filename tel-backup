#!/usr/bin/env bash
# SealyJ
# version 0.2
today=$(date +"%m_%d_%Y")
datetime=$(date +"%H_%M")
temp_storage=~/../usr/tmp
backup_location=~/storage/shared/tel/backup

check_folders(){
if [ ! -d $temp_storage ] ; then
	mkdir $temp_storage
fi
if [ ! -d ~/storage ] ; then
	echo "Error - No access to phone storage"
	echo "backups are made to /storage/emulated/0/tel, (this path is also accessible to TEL through ~/storage/shared/tel) if TEL hasn't been granted storage permissions, this will likely fail. Run termux-setup-storage to grant access"
	echo "program will exit.." && exit 1
fi
if [ ! -d ~/storage/shared/tel/backup ] ; then
	mkdir -p $backup_location 
fi
if [ ! -d "$backup_location/$today" ] ; then
	mkdir $backup_location/$today && printf "\e[38;5;2m Backup\e[m%s: created backup folder at: $backup_location/$today \n"
fi
}

make_backup(){
while true
do
	printf "\e[38;5;2m Backup\e[m%s: "
	read -p "This will overwrite any previous backups made the same day are you sure you want to continue? y/N : " answer
case $answer in
	[yY]* )
		
		check_folders  #create dirs if missing

		printf "\e[38;5;2m Backup\e[m%s: creating installed pkgs list...\n"
		(apt list --installed > $backup_location/$today/userpkgs-$datetime.txt > /dev/null 2>&1)
		printf "\e[38;5;2m Backup\e[m%s: backing up configs...\n"
		cd ~/.tel/configs
		rm -rf .restore_path
		echo "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/userconfs_$datetime.tar.gz . >&/dev/null
		printf "\e[38;5;2m Backup\e[m%s: backing up termux settings...\n"
		cd ~/.termux
		rm -rf .restore_path
		echo "$(pwd)" > .restore_path
		find . -type f | tar --exclude 'shell' -v -c -z -f $backup_location/$today/termux_$datetime.tar.gz >&/dev/null
		printf "\e[38;5;2m Backup\e[m%s: backing up TEL user data...\n"
		cd ~/.tel/data
		rm -rf .restore_path
		echo "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/userdata_$datetime.tar.gz . >&/dev/null &
		# last tar make archive must be child process	
		#show working spinner
		PID=$!
		i=1
		sp="/-\|"
		echo -n ' '
		while [ -d /proc/$PID ]
		do
			  printf "\b${sp:i++%${#sp}:1}"
			  sleep 0.1
		done
		echo -ne '\r' #remove last spinner
		printf "\e[38;5;2m Backup\e[m%s: completed\n"
		break;;

	[nN]* ) exit;;
	* )     echo "options are y or n...";;
esac
done

}

restore_backup(){
	printf "\e[38;5;2m Restore\e[m%s: loading data...\n"
	cd $backup_location 
	backup_file_chosen=$(fzf -e --cycle --color=16 --prompt="Choose a backup file to restore from: ")
	#cd $backup_dir_chosen
	#backup_file_chosen=$(ls -Af | fzf -e --cycle --color=16 --prompt="Choose a file to restore from: ")
	mkdir tmp > /dev/null 2>&1 
	cd tmp	
	#read extraction path from file?
	printf "\e[38;5;2m Restore\e[m%s: restoring archive - $backup_file_chosen\n"
	tar -x -U -f ../$backup_file_chosen --keep-directory-symlink
	#rm -rf "$(cat .restore_path)"
	#mkdir "$(cat .restore_path)"
	cp -rf * "$(cat .restore_path)"
	cd ..
	rm -r tmp
}

exit_utility(){
	printf "\e[38;5;2m Backup & Restore\e[m%s: Exiting...\n"
	exit 0
}

main() {

printf "\e[38;5;2m Backup & Restore\e[m%s\n"

HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=4
BACKTITLE="tel-backup"
TITLE="Backup & Restore"
MENU="Choose one of the following options:"

OPTIONS=(1 " Backup"
         2 " Restore"
         3 " Quit")

CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

clear
case $CHOICE in
        1)
	    make_backup
            ;;
        2)
	    restore_backup
            ;;
        3)
	    exit_utility
            ;;
esac
}

main $@

