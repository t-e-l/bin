#!/usr/bin/env bash
# SealyJ
# version 0.3
today=$(date +"%m_%d_%Y")
datetime=$(date +"%H_%M")
temp_storage=~/../usr/tmp
backup_location=~/storage/shared/tel/backup

check_folders(){
if [ ! -d $temp_storage ] ; then
	mkdir $temp_storage
fi
if [ ! -d ~/storage ] ; then
	printf "\e[38;5;2m Backup\e[m%s: "yy
	echo "Error - No access to phone storage"
	echo "backups are made to /storage/emulated/0/tel, (this path is also accessible to TEL through ~/storage/shared/tel) if TEL hasn't been granted storage permissions, this will likely fail. Run termux-setup-storage to grant access"
	echo "program will exit.." && exit_utility
fi
if [ ! -d ~/storage/shared/tel/backup ] ; then
	mkdir -p $backup_location 
fi
if [ ! -d "$backup_location/$today/$datetime" ] ; then
	mkdir -p $backup_location/$today/$datetime && printf "\e[38;5;2m Backup\e[m%s: created backup folder at: $backup_location/$today \n"
fi
}

make_backup(){
while true
do
	printf "\e[38;5;2m Backup\e[m%s: "
	read -p "This operation may overwrite previous backups made in the last minute, do you wish to continue? y/N : " answer
case $answer in
	[yY]* )
		check_folders  #create dirs if missing
		read -p "Enter a unique name for this backup? (blank to skip): " answer
		if [ ! -z "$answer" ] ; then
			user_custom_name="$answer-"
		else 
			user_custom_name=""
		fi
		# Termux packages #
		printf "\e[38;5;2m Backup\e[m%s: creating installed pkgs list...\n"
		rm -rf $TMPDIR/tel-backup/tmp
		mkdir -p $TMPDIR/tel-backup/tmp
		cd $TMPDIR/tel-backup/tmp
		echo -n "user_pkgs" > .restore_path
		(pkg list-installed | cut -d'/' -f 1 > user_pkgs.txt 2>&1)
		(pip list --format freeze | cut -d'=' -f 1 > pip_user_pkgs.txt 2>&1)
		sed -i '1d' user_pkgs.txt # delete first 'Listing done' line from apt output
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}user_pkgs.tar.gz . >&/dev/null
		cd $TMPDIR 
		rm -rf tel-backup/tmp
	
		# ~/.config #
		printf "\e[38;5;2m Backup\e[m%s: backing up user pkg configs\n"
		cd ~/.config
		rm -rf .restore_path
		echo -n "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}pkg_config.tar.gz . >&/dev/null
		rm -rf .restore_path	

		# SSH data #
		printf "\e[38;5;2m Backup\e[m%s: backing up ssh data\n"
		cd ~/.ssh
		rm -rf .restore_path
		echo -n "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}ssh.tar.gz . >&/dev/null
		rm -rf .restore_path

		# wal colors #
		printf "\e[38;5;2m Backup\e[m%s: backing up color data\n"
		cd ~/.cache/wal
		rm -rf .restore_path
		echo -n "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}colors.tar.gz . >&/dev/null
		rm -rf .restore_path

	
		# wallpapers #
		printf "\e[38;5;2m Backup\e[m%s: backing up wallpapers\n"
		cd ~/.wallpapers
		rm -rf .restore_path
		echo -n "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}wallpapers.tar.gz . >&/dev/null
		rm -rf .restore_path

		# Termux settings #
		printf "\e[38;5;2m Backup\e[m%s: backing up termux settings\n"
		cd ~/.termux
		rm -rf .restore_path
		echo -n "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}termux.tar.gz --exclude='shell' . >&/dev/null
		rm -rf .restore_path
		


		# TEL CONFIGS #
		printf "\e[38;5;2m Backup\e[m%s: backing up TEL configs\n"
		cd ~/.tel/configs
		rm -rf .restore_path
		echo -n "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}tel_confs.tar.gz . >&/dev/null
		rm -rf .restore_path

		# TEL DATA #
		printf "\e[38;5;2m Backup\e[m%s: backing up TEL user data\n"
		cd ~/.tel/data
		rm -rf .restore_path
		echo -n "$(pwd)" > .restore_path
		tar -v -c -z -f $backup_location/$today/$datetime/${user_custom_name}tel_data.tar.gz . >&/dev/null &
		rm -rf .restore_path
		
		# Spinner animation #
		# last tar make archive must be child process	
		#show working spinner
		PID=$!
		i=1
		sp="/-\|"
		echo -n ' '
		while [ -d /proc/$PID ]
		do
			  printf "\b${sp:i++%${#sp}:1}"
			  sleep 0.1
		done
		echo -ne '\r' #remove last spinner
		printf "\e[38;5;2m Backup\e[m%s: completed\n"
		break;;

	[nN]* ) exit_utility;;
	* )     echo "options are y or n...";;
esac
done

}

restore_backup(){
	printf "\e[38;5;2m Restore\e[m%s: loading data...\n"
	cd $backup_location 
	backup_file_chosen=$(fzf -e --cycle --color=16 --prompt="Choose a backup archive to restore from: ")
	[[ -z "$backup_file_chosen" ]] && exit 1
	while true
	do
		printf "\e[38;5;2m Restore\e[m%s: $backup_file_chosen\n"
		read -p "This action is potentially destructive are you sure you wish to continue? y/N : " answer
	case $answer in
		[yY]* )
			rm -r tmp > /dev/null 2>&1 #rm any partial failure
			mkdir tmp > /dev/null 2>&1
			cd tmp
			tar -x -U -f ../$backup_file_chosen --keep-directory-symlink
			restore_path=$(cat .restore_path)
			if [ "$restore_path" == "user_pkgs" ] ; then
				install_pkgs
				exit_utility
			else
				printf "\e[38;5;2m Restore\e[m%s: restoring from archive -> $backup_file_chosen -> $restore_path\n"
				cp -rf * $restore_path & 
			fi
			# last tar make archive must be child process	
			#show working spinner
			PID=$!
			i=1
			sp="/-\|"
			echo -n ' '
			while [ -d /proc/$PID ]
			do
				  printf "\b${sp:i++%${#sp}:1}"
				  sleep 0.1
			done
			echo -ne '\r' #remove last spinner
			cd ..
			rm -r tmp # cleanup	
			printf "\e[38;5;2m Restore\e[m%s: complete\n"
			break;;
		[nN]* ) exit_utility;;
		* )     echo "options are y or n...";;
	esac
	done
}

install_pkgs(){
	printf "\e[38;5;2m Restore\e[m%s: restoring termux packages...\n"
	pkg update -y
	while IFS= read -r line; do
		pkg_list_str="$pkg_list_str $line"
	done < $backup_location/tmp/user_pkgs.txt
	#echo "pkg_list_str = $pkg_list_str"
	pkg install -y $pkg_list_str
	printf "\e[38;5;2m Restore\e[m%s: restoring python packages...\n"
	# Now Python packages!
	while IFS= read -r line; do
		pip_pkg_list_str="$pip_pkg_list_str $line"
	done < $backup_location/tmp/pip_user_pkgs.txt
	pip install --user $pip_pkg_list_str

}

remove_backups(){
	while true
	do
		read -p "This action will delete ALL TEL backup data from your devices storage? yes/no : " answer
		case $answer in
			yes)
				cd $backup_location || exit 1
				rm -rf * && printf "\e[38;5;2m Backup & Restore\e[m%s: removed all old backup archives...\n"
				break
				;;
			no)
				exit_utility
				;;
			*)
				echo "Please type yes or no..."
				;;
		esac
	done
}
exit_utility(){
	printf "\e[38;5;2m Backup & Restore\e[m%s: Exiting...\n"
	exit 0
}

main() {

printf "\e[38;5;2m Backup & Restore\e[m%s\n"

HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=4
BACKTITLE="tel-backup"
TITLE="Backup & Restore"
MENU="Choose one of the following options:"

OPTIONS=(1 " Backup"
         2 " Restore"
         3 " Quit"
         4 " Remove Backups")

CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

clear
case $CHOICE in
        1)
	    make_backup
            ;;
        2)
	    restore_backup
            ;;
        3)
	    exit_utility
            ;;
	4)
	    remove_backups
	    ;;
esac
}

main $@

