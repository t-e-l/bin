#!/usr/bin/env bash
# search app for TEL 
# v3 - by SealyJ
if [ -z $SEARCH_LANG ] ; then 
	SEARCH_LANG='en-GB'
fi
zsh -c 'set -K' # disables ! events in zsh to allow for bangs in tel-search
instance_urls_file=~/.tel/configs/search/trusted.txt
provider_bangs_file=~/.tel/configs/search/provider_bangs.txt
searx_url='list_empty'

function rand_searx_instance () {
	n=0
	lines_searx_urls=()
	while read line; 
	do
		#add to array then select
		n=$(( $n + 1 ))
		lines_searx_urls+=($line)
	done < $instance_urls_file
	#select random num from pool
	randomiser=$((RANDOM % $n))
	selected_url=${lines_searx_urls[$randomiser]} #get url at position
	url_site_name_human=$(echo $selected_url | cut -d'/' -f 3)
	echo -ne "\e[38;5;2m Engine\e[m: [$url_site_name_human]"
	#check if chosen url is up
	instance_online=$(timeout 4 curl -I $selected_url 2>&1 | grep -w "200\|301")
	while [ -z "$instance_online" ]
	do
		randomiser=$((RANDOM % $n))
		selected_url=${lines_searx_urls[$randomiser]}
		url_site_name_human=$(echo $selected_url | cut -d'/' -f 3)
		echo -ne "\r\e[38;5;2m Engine\e[m: [$url_site_name_human]         "
		instance_online=$(timeout 5 curl -I "$selected_url" 2>&1 | grep -w "200\|301")
	done

	searx_url=$selected_url
}

if [ "$1" == "-h" ] || [ "$1" == "--help" ] ; then
	echo -e "Usage: tel-search [options] [search term]
	tel-search			= interactive site search prompt
	tel-search -h			= show this help menu
	tel-search -yt 'how to meme'	= search in youtube app for how to meme
	tel-search -t '!!w tty'		= search wiki using terminal browser for tty
	tel-search what are bangs?	= search for what are bangs?
	tel-search '!!gh TEL'		= search github for TEL
	tel-search '!!man echo'		= search manpage for echo command info
	tel-search '!!w sea otters'	= search wiki for sea otters
	tel-search '!!yt how to ask'	= search youtube for how to ask 
	
	"
	exit 0	
elif [ "$1" == "-yt" ] ; then
	user_query=${@:2}
	printf "\e[38;5;2m Search \e[m%sYouTube for: $user_query"
	text=${user_query// /+} #replace spaces with strings
	yt_url="https://m.youtube.com/results?search_query=$text"
	am start -a android.intent.action.MAIN -n 'com.google.android.youtube/com.google.android.apps.youtube.app.application.Shell$UrlActivity' "$yt_url" > /dev/null 2>&1  
	exit 0
elif [ "$1" == "-t" ] ; then
	input=${@:2}
	text=${input// /%20} #replace spaces with strings
	rand_searx_instance
	$BROWSER "${searx_url}${text}&language=$SEARCH_LANG"
	exit 0
elif [ -z $1 ] ; then
	provider=$(cat $provider_bangs_file | fzf -e --cycle --color=16 --prompt=" Search site: " --select-1)
	if [ -z "$provider" ]; then
	#	echo 'Nothing selected; exiting...'
		exit 1
	elif [ "$provider" == "Skip" ]; then	
		rand_searx_instance
		printf "\e[38;5;2m Search \e[m%sfor: "
		read user_query
		input="$user_query"
	elif [ "$provider" == "YouTube (in App)" ]; then	
		printf "\e[38;5;2m Search \e[m%sYouTube for: "
		read user_query
		text=${user_query// /+} #replace spaces with strings
		yt_url="https://m.youtube.com/results?search_query=$text"
		am start -a android.intent.action.MAIN -n 'com.google.android.youtube/com.google.android.apps.youtube.app.application.Shell$UrlActivity' "$yt_url" > /dev/null 2>&1 
		exit 0
	elif [ "$provider" != "Skip" ]; then
		echo -ne "\r\e[38;5;2m Searching \e[m$provider for: "
		#echo -ne "\e[38;5;2m for:\e[m "
		read user_query
		provider="!!$provider"
		input="$provider $user_query"
		rand_searx_instance
	fi
elif [ "$#" != 0 ] ; then
	input="$@"
	rand_searx_instance
	echo -ne "\r\e[38;5;2m Searching \e[m[$url_site_name_human] for: $input"
fi

# MAIN
main () {
text=${input// /%20} #replace spaces with strings
if [ $(uname -o) == 'Android' ] ; then
	termux-open-url "${searx_url}${text}&language=$SEARCH_LANG"
else
	xdg-open "${searx_url}${text}&language=$SEARCH_LANG"
fi
exit 0
}

main "$@"
